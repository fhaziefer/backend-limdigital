generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum MaritalStatus {
  SINGLE
  MARRIED
  DIVORCED
  WIDOWED
}

enum ContactType {
  PHONE
  EMAIL
  WHATSAPP
  TELEGRAM
  LINE
  OTHER
}

enum PositionType {
  DEWAN_PENASEHAT
  PENGURUS_HARIAN
  PEMBANTU_UMUM
  BIDANG
}

enum LeadershipPosition {
  KETUA_UMUM
  KETUA_1
  KETUA_2
  KETUA_3
  KETUA_4
  KETUA_5
  SEKRETARIS_UMUM
  SEKRETARIS_1
  SEKRETARIS_2
  SEKRETARIS_3
  SEKRETARIS_4
  SEKRETARIS_5
  BENDAHARA
  WAKIL_BENDAHARA
  ANGGOTA
}

enum LetterType {
  ROUTINE
  REFERENCE
  CERTIFICATE
  DECISION
  ENDORSEMENT
  INSTRUCTION
  REQUEST_RESPONSE
  ASSIGNMENT
  POWER_OF_ATTORNEY
  RECOMMENDATION
  STATEMENT
  WARNING
  ANNOUNCEMENT
  AGREEMENT
  CIRCULAR
}

enum LetterStatus {
  DRAFT
  WAITING_SECRETARY_REVIEW
  WAITING_CHAIRMAN_SIGNATURE
  WAITING_SECRETARY_SIGNATURE
  COMPLETED
  REJECTED
  ARCHIVED
}

enum SignatureType {
  CHAIRMAN
  SECRETARY
  BOTH
  CHAIRMAN_ONLY
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REVISED
}

enum NotificationType {
  SYSTEM
  LETTER_APPROVAL
  LETTER_SIGNATURE
  DISPOSITION
  GENERAL
  REMINDER
  ALERT
}

model User {
  id                  String    @id @default(uuid()) @db.VarChar(36)
  username            String    @unique @db.VarChar(50)
  email               String    @unique @db.VarChar(100)
  passwordHash        String    @db.VarChar(255)
  emailVerified       Boolean   @default(false)
  verificationToken   String?   @db.VarChar(100)
  verificationExpires DateTime?
  isActive            Boolean   @default(true)
  lastLogin           DateTime?
  failedLoginAttempts Int       @default(0)
  lockoutUntil        DateTime?
  mustChangePassword  Boolean   @default(false)
  passwordChangedAt   DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  profile             Profile?
  sessions            Session[]
  passwordResetTokens PasswordResetToken[]
  auditLogs           AuditLog[]
  notifications       Notification[]
  createdLetters      Letter[]             @relation("UserLetters")
  letterLogs          LetterLog[]
  approvals           Approval[]           @relation("UserApprovals")
  signatures          Signature[]          @relation("UserSignatures")
  dispositionsFrom    Disposition[]        @relation("DispositionFrom", map: "user_dispositions_from_fk")
  dispositionsTo      Disposition[]        @relation("DispositionTo", map: "user_dispositions_to_fk")

  @@map("users")
}

model Session {
  id           String   @id @default(uuid()) @db.VarChar(36)
  sessionToken String   @unique @db.VarChar(255)
  userId       String   @db.VarChar(36)
  ipAddress    String?  @db.VarChar(45)
  userAgent    String?  @db.VarChar(255)
  deviceType   String?  @db.VarChar(255)
  browser      String?  @db.VarChar(100)
  os           String?  @db.VarChar(100)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  expiresAt    DateTime
  lastActivity DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
  @@map("sessions")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.VarChar(36)
  token     String   @db.VarChar(100)
  userId    String   @db.VarChar(36)
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("password_reset_tokens")
}

model Profile {
  id            String         @id @default(uuid()) @db.VarChar(36)
  userId        String         @unique @db.VarChar(36)
  nik           String?        @unique @db.VarChar(16)
  fullName      String         @db.VarChar(100)
  gender        Gender?
  birthPlace    String?        @db.VarChar(50)
  birthDate     DateTime?
  religion      String?        @db.VarChar(30)
  maritalStatus MaritalStatus?
  profession    String?        @db.VarChar(50)
  photoUrl      String?        @db.VarChar(255)
  bio           String?        @db.Text
  joinedAt      DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user             User              @relation(fields: [userId], references: [id])
  address          Address?
  contacts         Contact[]
  educations       Education[]
  memberships      Member[]
  positionHistory  PositionHistory[]
  authoredLetters  Letter[]          @relation("ProfileLetters")
  approvals        Approval[]
  signatures       Signature[]
  dispositionsFrom Disposition[]     @relation("DispositionFromProfile")
  dispositionsTo   Disposition[]     @relation("DispositionToProfile")

  @@map("profiles")
}

model Address {
  id         String   @id @default(uuid()) @db.VarChar(36)
  profileId  String   @unique @db.VarChar(36)
  street     String   @db.VarChar(255)
  village    String?  @db.VarChar(50)
  district   String?  @db.VarChar(50)
  regency    String?  @db.VarChar(50)
  province   String?  @db.VarChar(50)
  postalCode String?  @db.VarChar(10)
  country    String   @default("Indonesia") @db.VarChar(50)
  latitude   Float?
  longitude  Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id])

  @@map("addresses")
}

model Education {
  id           String   @id @default(uuid()) @db.VarChar(36)
  profileId    String   @db.VarChar(36)
  institution  String   @db.VarChar(100)
  degree       String?  @db.VarChar(50)
  fieldOfStudy String?  @db.VarChar(50)
  startYear    Int
  endYear      Int?
  isAlumni     Boolean  @default(false)
  description  String?  @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  profile Profile @relation(fields: [profileId], references: [id])

  @@map("educations")
}

model Contact {
  id          String      @id @default(uuid()) @db.VarChar(36)
  profileId   String      @db.VarChar(36)
  contactType ContactType
  value       String      @db.VarChar(100)
  isPrimary   Boolean     @default(false)
  isVerified  Boolean     @default(false)
  description String?     @db.VarChar(255)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  profile Profile @relation(fields: [profileId], references: [id])

  @@unique([profileId, contactType, value])
  @@map("contacts")
}

model OrganizationLevel {
  id             String   @id @default(uuid()) @db.VarChar(36)
  name           String   @unique @db.VarChar(50)
  code           String   @unique @db.VarChar(10)
  description    String?  @db.Text
  hierarchyLevel Int
  createdAt      DateTime @default(now())

  regions     Region[]
  letterBooks LetterBook[] @relation("OrganizationLevelToLetterBook")

  @@map("organization_levels")
}

model Region {
  id        String   @id @default(uuid()) @db.VarChar(36)
  name      String   @db.VarChar(100)
  code      String   @unique @db.VarChar(10)
  levelId   String   @db.VarChar(36)
  parentId  String?  @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  level           OrganizationLevel      @relation(fields: [levelId], references: [id])
  parent          Region?                @relation("RegionHierarchy", fields: [parentId], references: [id])
  children        Region[]               @relation("RegionHierarchy")
  structures      Structure[]
  letters         Letter[]
  letterBooks     LetterBook[]
  letterSequences LetterNumberSequence[]

  @@map("regions")
}

model Department {
  id          String   @id @default(uuid()) @db.VarChar(36)
  name        String   @unique @db.VarChar(50)
  code        String   @unique @db.VarChar(10)
  description String?  @db.Text
  createdAt   DateTime @default(now())

  structures Structure[]
  letters    Letter[]    @relation("DepartmentLetters")

  @@map("departments")
}

model Structure {
  id           String       @id @default(uuid()) @db.VarChar(36)
  regionId     String       @db.VarChar(36)
  positionType PositionType
  departmentId String?      @db.VarChar(36)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  region     Region      @relation(fields: [regionId], references: [id])
  department Department? @relation(fields: [departmentId], references: [id])
  members    Member[]

  @@map("structures")
}

model Member {
  id          String             @id @default(uuid()) @db.VarChar(36)
  profileId   String             @db.VarChar(36)
  structureId String             @db.VarChar(36)
  position    LeadershipPosition
  startDate   DateTime
  endDate     DateTime?
  isActive    Boolean            @default(true)
  isPrimary   Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  profile         Profile           @relation(fields: [profileId], references: [id])
  structure       Structure         @relation(fields: [structureId], references: [id])
  positionHistory PositionHistory[]

  @@unique([profileId, structureId, position, startDate])
}

model PositionHistory {
  id             String    @id @default(uuid()) @db.VarChar(36)
  profileId      String    @db.VarChar(36)
  memberId       String?   @db.VarChar(36)
  positionTitle  String    @db.VarChar(100)
  positionLevel  String    @db.VarChar(50)
  regionName     String    @db.VarChar(100)
  departmentName String?   @db.VarChar(100)
  startDate      DateTime
  endDate        DateTime?
  isCurrent      Boolean   @default(false)
  notes          String?   @db.Text
  createdAt      DateTime  @default(now())

  profile      Profile @relation(fields: [profileId], references: [id])
  memberRecord Member? @relation(fields: [memberId], references: [id])

  @@index([profileId])
  @@index([isCurrent])
  @@map("position_history")
}

model AuditLog {
  id        String   @id @default(uuid()) @db.VarChar(36)
  userId    String?  @db.VarChar(36)
  action    String   @db.VarChar(50)
  tableName String   @db.VarChar(50)
  recordId  String   @db.VarChar(36)
  oldValues Json?
  newValues Json?
  ipAddress String?  @db.VarChar(45)
  userAgent String?  @db.VarChar(255)
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model Notification {
  id               String           @id @default(uuid()) @db.VarChar(36)
  userId           String           @db.VarChar(36)
  title            String           @db.VarChar(100)
  message          String           @db.Text
  notificationType NotificationType
  isRead           Boolean          @default(false)
  relatedId        String?          @db.VarChar(36)
  relatedType      String?          @db.VarChar(50)
  createdAt        DateTime         @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model LetterTemplate {
  id             String     @id @default(uuid()) @db.VarChar(36)
  name           String     @db.VarChar(100)
  code           String     @unique @db.VarChar(20)
  letterType     LetterType
  description    String?    @db.Text
  htmlContent    String     @db.Text
  defaultSubject String?    @db.VarChar(255)
  defaultCop     String     @db.VarChar(255)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  letters Letter[]

  @@map("letter_templates")
}

model Letter {
  id              String        @id @default(uuid()) @db.VarChar(36)
  letterNumber    String?       @unique @db.VarChar(50)
  letterType      LetterType
  templateId      String?       @db.VarChar(36)
  subject         String        @db.VarChar(255)
  htmlContent     String        @db.Text
  pdfUrl          String?       @db.VarChar(255)
  regionId        String        @db.VarChar(36)
  departmentId    String?       @db.VarChar(36)
  authorProfileId String?       @db.VarChar(36)
  createdById     String?       @db.VarChar(36)
  status          LetterStatus  @default(DRAFT)
  signatureType   SignatureType
  requiresStamp   Boolean       @default(true)
  isConfidential  Boolean       @default(false)
  letterDate      DateTime      @default(now())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  template      LetterTemplate?   @relation(fields: [templateId], references: [id], map: "letter_template_fk")
  region        Region            @relation(fields: [regionId], references: [id], map: "letter_region_fk")
  department    Department?       @relation("DepartmentLetters", fields: [departmentId], references: [id], map: "letter_department_fk")
  authorProfile Profile?          @relation("ProfileLetters", fields: [authorProfileId], references: [id])
  createdBy     User?             @relation("UserLetters", fields: [createdById], references: [id])
  recipients    Recipient[]
  copies        Copy[]
  dispositions  Disposition[]
  attachments   Attachment[]
  approvals     Approval[]
  signatures    Signature[]
  stamps        Stamp[]
  logs          LetterLog[]
  bookEntries   LetterBookEntry[]

  @@index([letterNumber])
  @@index([status])
  @@index([letterType])
  @@map("letters")
}

model Recipient {
  id           String   @id @default(uuid()) @db.VarChar(36)
  letterId     String   @db.VarChar(36)
  name         String   @db.VarChar(100)
  address      String?  @db.VarChar(255)
  email        String?  @db.VarChar(100)
  phone        String?  @db.VarChar(20)
  organization String?  @db.VarChar(100)
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())

  letter Letter @relation(fields: [letterId], references: [id])

  @@map("recipients")
}

model Copy {
  id           String   @id @default(uuid()) @db.VarChar(36)
  letterId     String   @db.VarChar(36)
  name         String   @db.VarChar(100)
  address      String?  @db.VarChar(255)
  email        String?  @db.VarChar(100)
  phone        String?  @db.VarChar(20)
  organization String?  @db.VarChar(100)
  notes        String?  @db.Text
  createdAt    DateTime @default(now())

  letter Letter @relation(fields: [letterId], references: [id])

  @@map("copies")
}

model Disposition {
  id            String    @id @default(uuid()) @db.VarChar(36)
  letterId      String    @db.VarChar(36)
  fromUserId    String?   @db.VarChar(36)
  fromProfileId String?   @db.VarChar(36)
  toUserId      String?   @db.VarChar(36)
  toProfileId   String?   @db.VarChar(36)
  notes         String    @db.Text
  isCompleted   Boolean   @default(false)
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  letter      Letter   @relation(fields: [letterId], references: [id], map: "disposition_letter_fk")
  fromUser    User?    @relation("DispositionFrom", fields: [fromUserId], references: [id], map: "disposition_from_user_fk")
  fromProfile Profile? @relation("DispositionFromProfile", fields: [fromProfileId], references: [id], map: "disposition_from_profile_fk")
  toUser      User?    @relation("DispositionTo", fields: [toUserId], references: [id], map: "disposition_to_user_fk")
  toProfile   Profile? @relation("DispositionToProfile", fields: [toProfileId], references: [id], map: "disposition_to_profile_fk")

  @@map("dispositions")
}

model Attachment {
  id          String   @id @default(uuid()) @db.VarChar(36)
  letterId    String   @db.VarChar(36)
  name        String   @db.VarChar(100)
  fileUrl     String   @db.VarChar(255)
  description String?  @db.Text
  createdAt   DateTime @default(now())

  letter Letter @relation(fields: [letterId], references: [id])

  @@map("attachments")
}

model Approval {
  id         String         @id @default(uuid()) @db.VarChar(36)
  letterId   String         @db.VarChar(36)
  approverId String         @db.VarChar(36)
  userId     String?        @db.VarChar(36)
  level      Int
  status     ApprovalStatus @default(PENDING)
  notes      String?        @db.Text
  approvedAt DateTime?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  letter   Letter  @relation(fields: [letterId], references: [id])
  approver Profile @relation(fields: [approverId], references: [id])
  user     User?   @relation("UserApprovals", fields: [userId], references: [id])

  @@map("approvals")
}

model Signature {
  id               String             @id @default(uuid()) @db.VarChar(36)
  letterId         String             @db.VarChar(36)
  signerId         String             @db.VarChar(36)
  userId           String?            @db.VarChar(36)
  role             LeadershipPosition
  signatureImage   String?            @db.VarChar(255)
  digitalSignature String?            @db.VarChar(255)
  signedAt         DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  letter Letter  @relation(fields: [letterId], references: [id])
  signer Profile @relation(fields: [signerId], references: [id])
  user   User?   @relation("UserSignatures", fields: [userId], references: [id])

  @@map("signatures")
}

model Stamp {
  id         String   @id @default(uuid()) @db.VarChar(36)
  letterId   String   @db.VarChar(36)
  stampImage String   @db.VarChar(255)
  stampedAt  DateTime @default(now())
  createdAt  DateTime @default(now())

  letter Letter @relation(fields: [letterId], references: [id], map: "stamp_letter_fk")

  @@map("stamps")
}

model LetterLog {
  id        String   @id @default(uuid()) @db.VarChar(36)
  letterId  String   @db.VarChar(36)
  userId    String   @db.VarChar(36)
  action    String   @db.VarChar(50)
  details   String?  @db.Text
  createdAt DateTime @default(now())

  letter Letter @relation(fields: [letterId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@map("letter_logs")
}

model LetterNumberSequence {
  id         String     @id @default(uuid()) @db.VarChar(36)
  regionCode String     @db.VarChar(10)
  regionId   String?    @db.VarChar(36)
  letterType LetterType
  year       Int
  sequence   Int        @default(1)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  region Region? @relation(fields: [regionId], references: [id], map: "letter_sequence_region_fk")

  @@unique([regionCode, letterType, year])
  @@map("letter_number_sequences")
}

model LetterBook {
  id                  String    @id @default(uuid()) @db.VarChar(36)
  bookNumber          String    @unique @db.VarChar(20)
  startDate           DateTime
  endDate             DateTime?
  regionId            String    @db.VarChar(36)
  organizationLevelId String?   @db.VarChar(36)
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())

  region            Region             @relation(fields: [regionId], references: [id], map: "letter_book_region_fk")
  organizationLevel OrganizationLevel? @relation("OrganizationLevelToLetterBook", fields: [organizationLevelId], references: [id], map: "letter_book_organization_level_fk")
  entries           LetterBookEntry[]

  @@map("letter_books")
}

model LetterBookEntry {
  id          String   @id @default(uuid()) @db.VarChar(36)
  bookId      String   @db.VarChar(36)
  letterId    String   @db.VarChar(36)
  entryNumber Int
  entryDate   DateTime @default(now())
  notes       String?  @db.Text
  createdAt   DateTime @default(now())

  book   LetterBook @relation(fields: [bookId], references: [id])
  letter Letter     @relation(fields: [letterId], references: [id])

  @@unique([bookId, entryNumber])
  @@map("letter_book_entries")
}
